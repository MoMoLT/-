首先了解ios的签名：https://www.jianshu.com/p/efa64438ef49
然后了解ios重签名：https://www.jianshu.com/p/ac5ce7e2bb53?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation

1.理解签名

对于数据，它应该是可靠且完整的。
为了校验数据包的完整性，即没被修改过或损坏。
首先利用MD5算法（可能其他的hash算法）进行信息"摘要"。了解MD5。
---------------------------------------------------------------------------------
MD5：
用于加密，无论什么大小的数据，如一个'a'字符，或者上万的字。经过MD5加密后，都会生成16位的字符串，和一个32位的字符串。这就是“摘要”，我们只需取一种字符串即可（16位的或32位的），百度搜索MD5加密即可在线加密，可以一试。

只要改动一点东西，再次用MD5加密，那么生成的那16位字符串，32位字符串就会与原本的完全不同。
故而，可以用这种方式进行文件校验，验证文件是否被修改。即如果先后两次MD5加密的结果不一样，文件完整性被破坏。
---------------------------------------------------------------------------------

继续下去,下面就要讲到加密了，这涉及到密钥知识。
---------------------------------------------------------------------------------
私钥和公钥？
算是中逻辑上的钥匙，其实他就是一串字符串。
而加密解密，需要用到不同的算法，这字符串就是用来当参数用的。
算法是锁，字符串是钥匙。

就这样理解吧：
我拿着私钥，这东西是不给别人看的。而我的公钥是公开的，用于给别人的。
我拿着私钥加密一个文件，那么想要解密出这个文件，那么就得用公钥解密。什么私钥加密用私钥解密，公钥加密用公钥解密是不存在的。
别人用公钥加密的文件，就必须用私钥解密，而私钥就我有。那么这个文件就只有我能解开。
那么我怎么判断收到的文件是不是指定那位发的？简单啊，别人也有私钥，你就有他的公钥。
公钥匙第一次联系的时候，给别人让别人保存着的。

别人想知道收到的文件是不是我发的？
我先把文件a用私钥加密，变成文件b，然后我发给小K,并告诉小K我的文件a内容，如果他用公钥解开后，对应一下，文件确实如我所说符合，那么这就是我发的了。但是直接说出a内容很蠢，于是用到了信息“摘要”。
---------------------------------------------------------------------------------

进行信息“摘要”后，把“摘要”出的那一串字符串，用一个私钥进行加密，就得到了一个签了名的文件。
何为签名，自然是一个代表着本人的信物了。签名字，私钥加密。

发数据包给别人时，同时把签名附带发过去了。
别人用你告诉他的公钥（什么时候告诉他的？那就是你第一次用某个私钥加密文件后，发给他时，顺便告诉他你的公钥了）
用你的公钥解开签名，获得“摘要”，然后用MD5对数据包加密一次，又获得一个信息”摘要“，两个对比一下。如果相同，数据完整性是好的。

>>>数字证书：包含了本人的信息，和一把公钥

2.重签名
生成一个ipa包时，apple会用你的证书对ipa包进行签名，然后把签名产生的数据放进ipa包中某个文件。
当你解压ipa包时，如果再把解压的包还原ipa包时，他的签名就失效了，上传的话，apple不会收这个文件。
而我们需要对ipa包进行混淆操作，一定需要解压，然后修改。
既然原来的签名失效了，那么我用工具仿造一下签名就行了。


重签名很方便，如果你info.plist参数要改，只要有ipa包，解压修改一下然后压缩成ipa重签名一遍就行了。
如果你不这么做，你还需要把走一趟  把工程变成IPA包。的过程，，大的项目可能得花个一个多小时才能完成。
如果你要频繁的修改，那么对不起，时间不够。

重签名还可以做到替换证书和配置文件，如果新的配置文件上绑定的工程名ID不同，那么你还要把info.plist中工程名的唯一ID修改成一样的。